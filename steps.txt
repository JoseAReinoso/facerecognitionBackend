//setting up Our Server
1.step npm init -y to start package.json with default values. Make sure to change naming as you would like on package.json afterwards.
2.install body-parser, express and nodemon(move nodemon to devDependencies)
3.setup scripts start to nodemon server.js and go ahead and create server.js by touch server.js command
4.go to server and do the esqueleton to start an express server const express = require('express') / const app = express() / app.listen(3000, () => {
    console.log('app is running on port' )
})
5.do a basic get route.
6 Now lets decide what routes do i need =
 * / res = this is working 
 * /signin --> POST and respond with sucess/fail
 * /register --> POST AND response with new user object
 * /profile/:id' --> GET = to get user by the Id
 * /image --> PUT --> to increase image entry count

 7.import bodyParser =  require('body-parser')  // app.use(bodyParser.json())
 8.create /signin endpoint
 9.create /register endpoint
 10.create /profile endpoing
 11 create /image endpoing
 12.install bcrypt-node to protect passwords. (NOTE: Always send password info from front end using POST via HTTPS, and always make sure
 to hash our passwords before inserting them to our database) read this link about security = https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/learn/lecture/8767508#notes

 //connect front end to this server using localhost
 13. fetch('http://localhost:3001/') on the front end to start listening to your server on the react App.
 14. make sure to install CORS  = npm install cors

 //Lets create database
 15.Lets create the database and tables using postgreSQL (https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/learn/lecture/12240608#notes)
(https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/learn/lecture/12240616#notes)
(https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/learn/lecture/22727187#notes)
 16. install knex for postgreSQL (https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/learn/lecture/8860472#notes)
 to start connecting to your database

 //Setup Register endpoint with database
 16.https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/learn/lecture/8860478#notes

 //setup the get user by ID endpoint with database
17.https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/learn/lecture/8860480#notes

//setting the increment image count endpoing
18. https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/learn/lecture/8862368#notes
19. a bit of a note here... we will be using a SQL increment function http://knexjs.org/#Builder-increment that will increment that count
for us vs us having to grab the current count of the database. and then add to it.

//setting up the sign in endpoint and updating the login table using knex while encrypting the pasword using bcrypt
20. https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/learn/lecture/8862374?start=0#notes
21. hash passowrd const hash = bcrypt.hashSync(password)... make sure you npm install bcrypt-nodejs
and const bcrypt = require('bcrypt-nodejs'); first
22. keep an eye on the transaction term here, which is use to keep relational databases consistent and would fail in a system failure.
(watch video on top after minute 2)
23.watch https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/learn/lecture/8862374#notes after minute 9

//Clean code base
24. Cleaning code by having a controllers folder and separate functions for each of the endpoints
25. ill be doing "dependencies injections" from my server.js into each of the controller to make sure depencencies are passed through the next
file.

//Do validations on your endpoints to make sure when get error handling on when users are missing or
provide wrong information
26.on register make sure that users are providing name,email and password
27.on login make sure that users are providing email and password

//Lets move face detection API to backend to hide the key
28.npm install clarifai
29.on the image coontroller transfer the frontend code and make necessary changes
30.So.. require clarifia ..then copy and paste app variable with the clairia api key in it 
then... copy and paste from the the front end the part where we are accessing the clarifia 
models = app.models.predict(Clarifai.FACE_DETECT_MODEL,this.state.input)
31. where it says this.state.input, now we will be getting it from the send request from front end.
example = it will be req.body.input vs on the front end this.state.input
32.so knowing this make a imageAPIcall variable receiving req, res and export it to make another
endpoint on server.js = app.post("/imageAPIcall",(req, res)=> {image.imageAPIcall(req, res)})
33.on the front end make a fetch request to backend sending in the input.
34.on the backend receive that input within the imageAPIcall function and return back data to frontend
35.on the front end make sure you receive the response and convert this in json object and then
let the app flow do the same as it was doing it before we started implementing this except this time
we no longer showing api call on the webbrowser logs and we are secured.

//deploying this in heroku
36. install heroku
37. heroku create... that will give me a .git link = https://damp-brook-10306.herokuapp.com/ | https://git.heroku.com/damp-brook-10306.git